import Head from "next/head";
import { NextRouter, useRouter } from "next/router";
import React, { ChangeEvent, useState } from "react";
import { MdOutlineDarkMode,MdMenu } from "react-icons/md";
import { FiSun } from "react-icons/fi";
import {RiAppsFill} from "react-icons/ri";
// import { TiThMenu } from "react-icons/ti";
import MenuItem from "../components/Menu/MenuItem";
import { APP_NAME, LOGOUT_MODAL_DESC, LOGOUT_MODAL_TITLE } from "../utils/constants";
import { useCountContext } from "../utils/contexts/counter/CounterHooks";
import { useUiContext } from "../utils/contexts/ui/UiHooks";
// import { useTheme } from "next-themes";
// import { themeChange } from 'theme-change';

// const { themeChange } = require("theme-change");
export default function Dashboard() {
  const router: NextRouter = useRouter();
  // giving alias with colon (:)
  const { state: countState, action: countAction } = useCountContext();
  const { state: uiState, action: uiAction } = useUiContext();
  type ModalValue = boolean;

  const [modalLogout, setModalLogout] = useState<ModalValue>(false);

  // const xd: boolean = false;
  // const {theme, setTheme} = useTheme();

  function toggleModalLogout(value: boolean) {
    setModalLogout(value);
    // console.log(modalLogout);
  }

  return (
    // <CounterProvider>
    <>
      <Head>
        <title>Dashboard - Scuffed Wordle API Client</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="drawer drawer-mobile w-full">
        <input id="my-drawer-2" type="checkbox" className="drawer-toggle btn" />
        <div className="drawer-content ">
          {/* <!-- Navbar --> */}
          <div className="w-full navbar bg-base-300 sticky">
            {/* toggle menu button */}
            <label
              className="mr-2 btn btn-circle lg:hidden btn-ghost"
              htmlFor="my-drawer-2"
            >
              <MdMenu size={30} className="text-base-content" />
            </label>
            {/* app name */}
            <RiAppsFill size={30} className="text-primary"/>
            <div className="flex-1 mx-2 text-lg font-bold text-primary">{APP_NAME}</div>
            {/* toggle darktheme */}
            <div className="flex items-center">
              <label className="btn btn-circle swap swap-rotate btn-ghost">
                <input
                  type="checkbox"
                  checked={uiState.darkTheme}
                  onChange={(event: ChangeEvent<HTMLInputElement>) =>
                    uiAction.toggleDarkTheme(event.target.checked)
                  }
                />
                {/* if darktheme on show the light theme icon */}
                <MdOutlineDarkMode
                  size={30}
                  className="swap-off text-base-content"
                />
                <FiSun size={30} className="swap-on text-base-content" />
              </label>
            </div>
          </div>
          {/* CONTENT */}
          <div className="flex flex-col items-center justify-center p-2 lg:p-4">
            <label
              htmlFor="my-drawer-2"
              className="btn btn-primary drawer-button lg:hidden"
            >
              Open drawer
            </label>
            {/* <Link href={"/"} passHref> */}
            <button className="btn btn-primary" onClick={() => router.back()}>
              Back
            </button>
            {/* </Link> */}
            <h2>Counter</h2>
            <p>Count : {countState.count}</p>
            <button
              className="btn btn-primary"
              onClick={() => countAction.increase(1)}
            >
              Increase
            </button>
            <button
              className="btn btn-secondary"
              onClick={() => countAction.decrease(1)}
            >
              Decrease
            </button>

            <h2 className="mt-6">Dark theme : {uiState.darkTheme + ""}</h2>
            <input
              type="checkbox"
              className="toggle toggle-primary"
              checked={uiState.darkTheme}
              onChange={() => uiAction.toggleDarkTheme(!uiState.darkTheme)}
            />

            <div className="m-4">
              <button className="btn btn-primary">primary</button>
              <button className="btn btn-secondary">secondary</button>
              <button className="btn btn-accent">accent</button>
            </div>

            <div className="m-4" data-theme="valentine">
              <button className="btn btn-primary">primary</button>
              <button className="btn btn-secondary">secondary</button>
              <button className="btn btn-accent">accent</button>
            </div>

            <div className="m-4 tabs">
              <button className="tab tab-lifted">Tab 1</button>
              <button className="tab tab-lifted tab-active">Tab 2</button>
              <button className="tab tab-lifted">Tab 3</button>
            </div>

            <div className="m-4">
              <input type="checkbox" className="toggle toggle-primary" />
              <input type="checkbox" className="toggle toggle-secondary" />
              <input type="checkbox" className="toggle toggle-accent" />
            </div>

            <div className="card shadow-2xl w-80 m-4">
              <figure>
                <img src="https://picsum.photos/id/1005/500/250" />
              </figure>
              <div className="card-body">
                <h2 className="card-title">DaisyUi Card</h2>
                <p>
                  Rerum reiciendis beatae tenetur excepturi aut pariatur est
                  eos. Sit sit necessitatibus.
                </p>
              </div>
            </div>

            <div className="dropdown m-4">
              <div tabIndex={0} className="m-1 btn">
                Dropdown
              </div>
              <ul
                tabIndex={0}
                className="p-2 menu dropdown-content bg-neutral text-neutral-content rounded-box w-52"
              >
                <li>
                  <a>Item 1</a>
                </li>
                <li>
                  <a>Item 2</a>
                </li>
              </ul>
            </div>

            <label htmlFor="my-modal" className="btn modal-button">
              Modal
            </label>

            <ul className="steps my-4 w-full">
              <li className="step step-primary">Register</li>
              <li className="step step-primary">Choose plan</li>
              <li className="step">Purchase</li>
              <li className="step">Receive Product</li>
            </ul>

            <div className="avatar online m-10">
              <div className="rounded-full w-24 h-24">
                <img src="https://i.pravatar.cc/150?img=3" />
              </div>
            </div>
            <div className="avatar offline m-10">
              <div className="rounded-full w-24 h-24">
                <img src="https://i.pravatar.cc/150?img=3" />
              </div>
            </div>
          </div>
        </div>
        <div className="drawer-side">
          <label htmlFor="my-drawer-2" className="drawer-overlay backdrop-blur-sm"></label>
          {/* {uiState.menuOn} */}

          <ul className="menu p-4 overflow-y-auto w-60 bg-base-300 text-base-content">
            {/* <!-- Sidebar content here --> */}
            {uiState.menuList.map((menu, index) => (
              <MenuItem
                key={menu.id}
                title={menu.title}
                isActive={menu.id === uiState.menuOn}
                icon={menu.icon}
                action={() =>
                  menu.type == "PAGE"
                    ? uiAction.selectMenu(menu.id)
                    : toggleModalLogout(true)
                }
              />
            ))}
          </ul>
        </div>
      </main>
      {/* Logout modal */}
      <>
        <input
          id="my-modal"
          type="checkbox"
          checked={modalLogout}
          onChange={(event: ChangeEvent<HTMLInputElement>) =>
            toggleModalLogout(event.target.checked)
          }
          className="modal-toggle"
        />
        <div className="modal backdrop-blur-sm">
          <div className="modal-box border-2 border-primary sm:border-transparent">
            <p className="text-2xl mb-6">{LOGOUT_MODAL_TITLE}</p>
            <p>{LOGOUT_MODAL_DESC}</p>
            <div className="modal-action">
              <label
                htmlFor="my-modal"
                className="btn w-24 btn-outline"
                onClick={() => {
                  // toggleModalLogout(false);
                  // router.back();
                }}
              >
                Cancel
              </label>
              <label
                htmlFor="my-modal"
                className="btn w-24 btn-primary"
                onClick={() => {
                  // toggleModalLogout(false);
                  router.back();
                }}
              >
                OK
              </label>
            </div>
          </div>
        </div>
      </>
    </>
  );
}

// export default Dashboard;
