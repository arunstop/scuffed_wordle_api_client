import { Transition } from "@headlessui/react";
import _ from "lodash";
import { nanoid } from "nanoid";
import Head from "next/head";
import React, { Fragment, ReactNode, useState } from "react";
import { MdAddCircle, MdDelete, MdEdit } from "react-icons/md";
import Alert from "../../components/Alert";
import Drawer from "../../components/Drawer/Drawer";
import PhraseAddForm from "../../components/Forms/PhraseAddForm";
import PhraseEditForm from "../../components/Forms/PhraseEditForm";
import HeadlessModal from "../../components/HeadlessModal";
import { useApiContext } from "../../utils/contexts/api/ApiHooks";
import { APP_NAME } from "../../utils/helpers/constants/ConstantText";
import { Phrase, PhraseType } from "../../utils/models/PhraseModel";

interface ModalEditProps {
  phraseToEdit: Phrase | null;
  value: boolean;
}

export default function PagePhrases() {
  const {
    state: apiState,
    state: { phrase },
    action: apiAction,
  } = useApiContext();
  const [alertInfo, setAlertInfo] = useState(true);
  const [modalAdd, setModalAdd] = useState(false);
  const [modalEdit, setModalEdit] = useState<ModalEditProps>({
    phraseToEdit: null,
    value: false,
  });
  const [modalClear, setModalClear] = useState(false);

  const TBL_PHRASE_TYPE = (type: PhraseType): ReactNode => {
    switch (type) {
      case "LOSE":
        return <span className="font-bold text-error">{type}</span>;
      case "WIN":
        return <span className="font-bold text-success">{type}</span>;
      default:
        return <span className="font-bold text-info">{type}</span>;
    }
  };

  const TBL_ACTION_BUTTONS = (phrase: Phrase): ReactNode => {
    return (
      <div className="flex gap-2">
        <button
          className="btn btn-secondary btn-sm btn-circle bg-opacity-50"
          onClick={() => setModalEdit({ phraseToEdit: phrase, value: true })}
        >
          <MdEdit />
        </button>
        <button
          className="btn-neutral btn btn-sm btn-circle bg-opacity-50"
          onClick={() => {
            apiAction.phrase.delete(phrase.id);
          }}
        >
          <MdDelete />
        </button>
      </div>
    );
  };

  const HEAD = (
    <Head>
      <title>Phrases - {APP_NAME}</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
  );

  const CONTENT = (
    <Drawer>
      <div className="flex grow flex-col gap-y-4 p-2 sm:p-4">
        <div className="w-full lg:hidden pt-2 sm:pt-0">
          <div className="hidden sm:block">
            <span className="text-3xl font-bold">Phrase page</span>
            <div className="divider my-1"></div>
          </div>
          <div className="sm:hidden">
            <span className="text-2xl sm:text-3xl md:text-4xl font-bold divider ">
              Phrase
            </span>
          </div>
        </div>
        {alertInfo && (
          <Alert
            color="info"
            title="Phrases page is used to manage phrases"
            //   subtitle={`Phrases are used for the user-end app to show expressions to users, e.g. Good Luck, Nice Try, Well done, etc.
            // Phrases mainly appear in pop-up messages when users start playing the game or when the game is over.`}
            action={() => setAlertInfo(false)}
            actionLabel="I understand"
          />
        )}
        {/* BUTTONS */}
        <div className="flex flex-wrap items-center gap-4">
          <button
            className="btn btn-primary btn-block gap-2 sm:w-auto"
            onClick={() => setModalAdd(true)}
          >
            Add a phrase
            <span className="text-2xl">
              <MdAddCircle />
            </span>
          </button>
          <button
            className="btn btn-primary btn-block gap-2 sm:w-auto"
            onClick={() =>
              apiAction.phrase.add({
                id: nanoid(),
                text: nanoid(),
                type: PhraseType.START,
              })
            }
          >
            Add a random phrase
            <span className="text-2xl">
              <MdAddCircle />
            </span>
          </button>
          {/* <button
            className="btn btn-secondary btn-block gap-2 sm:w-auto"
            onClick={() => setModalClear(true)}
            disabled={phrase.list.length === 0}
          >
            Clear all phrases
            <span className="text-2xl">
              <MdClose />
            </span>
          </button> */}
        </div>
        <div className="overflow-x-auto rounded-xl border-2 border-neutral">
          <table className="table w-full">
            {/* head */}
            <thead>
              <tr>
                <th>#</th>
                <th>Text</th>
                <th>Type</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {phrase.list.length === 0 ? (
                <tr>
                  <td className="text-center" colSpan={4}>
                    Nothing found.
                  </td>
                </tr>
              ) : (
                _.reverse([...phrase.list]).map((phraseItem, i) => {
                  return (
                    <Transition
                      show={phrase.list.includes(phraseItem)}
                      as={Fragment}
                      key={phraseItem.id}
                      appear
                      enter="transform transition duration-200"
                      enterFrom="scale-90 opacity-0"
                      enterTo="scale-100 opacity-100"
                      leave="transform transition duration-200"
                      leaveFrom="scale-100 opacity-100"
                      leaveTo="scale-90 opacity-0"
                    >
                      <tr className={`${i % 2 !== 0 ? "active" : ""}`}>
                        <th>{i + 1}</th>
                        <td>{phraseItem.text}</td>
                        <td>{TBL_PHRASE_TYPE(phraseItem.type)}</td>
                        <td>{TBL_ACTION_BUTTONS(phraseItem)}</td>
                      </tr>
                    </Transition>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </div>
    </Drawer>
  );

  const ADD_MODAL = (
    <HeadlessModal
      value={modalAdd}
      title="Add A Phrase"
      onClose={(value) => setModalAdd(value)}
      isBig
    >
      {(onClose) => <PhraseAddForm onClose={onClose} />}
    </HeadlessModal>
  );

  const EDIT_MODAL = (
    <HeadlessModal
      value={modalEdit.value}
      title="Edit Phrase"
      onClose={(value) => setModalEdit({ phraseToEdit: null, value: false })}
      isBig
    >
      {(onClose) => (
        <PhraseEditForm
          phraseToEdit={modalEdit.phraseToEdit}
          onClose={onClose}
        />
      )}
    </HeadlessModal>
  );

  // const CLEAR_ALL_MODAL = (
  //   <HeadlessModal
  //     value={modalClear}
  //     title="Clear all phrases"
  //     desc="All phrases will be wiped out, the player's app is going to be expresionless. Proceed?"
  //     color="error"
  //     onClose={() => setModalClear(false)}
  //     actionY={() => {}}
  //   >
  //     {/* <div>add phrases form</div> */}
  //   </HeadlessModal>
  // );
  return (
    <>
      {HEAD}
      {CONTENT}
      {ADD_MODAL}
      {EDIT_MODAL}
      {/* {CLEAR_ALL_MODAL} */}
    </>
  );
}
